#!/usr/bin/perl
#
##############################################################################
#
# File Name:    ress.pl
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

use strict;
use HTML::Template;
use Data::Dumper;

use payonline_tools;

use vars qw(%args $tmpldir $lang $errmsg $crtdate $usessl
	);

my $me 		= $ENV {SCRIPT_NAME};
my $us 		= $ENV {SERVER_NAME};
my $qs 		= $ENV {QUERY_STRING};
my $pi 		= $ENV {PATH_INFO};
my $lang 	= 'en';
my $tmpldir = '/var/www/vhosts/payonline.epfl.ch/private/tmpl/XX/';
my $logfile	= '/var/log/httpd/payonline.log';

my $noHeaderInsts = 'cyhcwjm0podw3bcnlgu1r0u01s6f0zbc';

my %messages	= (
	fr => [
		' *** Attention : version de test. Ne pas utiliser, svp ! ***',	
		'Confirmation de paiement',
		'Transaction :',
		'PostFinance ID :',
		'Méthode de paiement :',
		'Total :',
		'Au nom de :',
		'Paiement refusé',
		'Changement de statut de la transaction',
	      ],
	en => [
		' *** Warning : test version. Not for public usage ! ***',	# 15
		'Payment Confirmation',
		'Transaction :',
		'PostFinance ID :',
		'Payement method:',
		'Total :',
		'Paid for :',
		'Payment refused',
		'Transaction status changed',
	      ],
	);
	
my $verbose 		= '1';
my $CHECK_YPSrv = 0;
$| = 1;

  payonline_tools::setLog($logfile);
  %args			= payonline_tools::loadargs ();
  $crtdate 	= payonline_tools::getcrtdate();

  payonline_tools::init ();
 
  dispatch ();
  exit;

#------
sub dispatch {

   if      ($pi =~  /^\/cert/) {
   	$args{fail}    = 1 if   ($pi =~ /fail/);
   	$args{offline} = 1 if   ($pi =~ /offline/);
   	cert ();
   } elsif ($pi =~  /^\/result/) {
   	result ();
   } 
}

#------
sub cert {

warn "payonline cert\n";

  print "Content-Type: text/html; charset=iso-8859-1\n\n";
  
  process_response();

	exit;
}

#------
sub process_response {

warn "payonline process_response: ** CERT from YellowPay **\n";
	if ($CHECK_YPSrv) {
		my $YPSrv = $ENV{REMOTE_ADDR};
		return unless $YPSrv;
		unless ($payonline_tools::YPServersIP =~ /$YPSrv/) {
	warn "payonline process_response: $YPSrv : unknown server in static list\n";
			if (payonline_tools::IPinRange($YPSrv)) {
	warn "payonline process_response: OK :: $YPSrv in range\n";
			} else {
				my $msg = qq{error :: id_trans=$args{orderID} illegal access from server IP=$YPSrv};
				payonline_tools::send_mail ('payonline\@epfl.ch', 'payonline ERROR :: unknown Postfinance server', $msg);
				return;
			}
		}
	}

  foreach my $item (keys %args) {
		warn "   $item=$args{$item}\n";
  }  

  my $id_trans = $args{orderID};
  return unless $id_trans;
  return if  $id_trans =~ /select/i;
  return if  $id_trans =~ /insert/i;
  return if  $id_trans =~ /update/i;

  # - get transaction data
  my $trans= payonline_tools::getTrans ($id_trans,'');
  unless ($trans) {
  	warn "payonline process_response: id_trans=$id_trans not found\n";
  	return;
  }
  
  # - get instance data
  my $sql  = qq{select * from instances where id=?};
  my $sth  = payonline_tools::dbquery ($sql, ($trans->{id_inst}));
  my $inst = $sth->fetchrow_hashref();
  unless ($inst) {
  	warn "payonline process_response: instance: not found for id_trans=$id_trans\n";
  	return;
  }
  my $etat = $inst->{etat};
warn "payonline process_response: inst etat=$etat\n";

  my $query	= payonline_tools::getQuery ($id_trans);
  unless ($query) {
  	warn "payonline process_response: no query id_trans=$id_trans\n";
  	return;
  }
warn "payonline process_response: query\n";
 
  foreach my $item (keys %$query) {
warn "   $query->{$item}\n";  
  }

# - check hash --------
  $payonline_tools::SHAsalt	= $payonline_tools::SHAsaltTest if $etat eq 'test';
  my $hash = payonline_tools::makeHash ({
							orderID 	=> $args{orderID},
							currency 	=> $args{currency},
							amount 		=> $args{amount},
							PM 				=> $args{PM},
							ACCEPTANCE=> $args{ACCEPTANCE},
							STATUS 		=> $args{STATUS},
							CARDNO 		=> $args{CARDNO},
							PAYID 		=> $args{PAYID},
							NCERROR 	=> $args{NCERROR},
							BRAND 		=> $args{BRAND},	
							}, 'out');
#warn "payonline process_response: ... 4 hash=$hash, arghash=$args{SHASIGN}\n";
  unless ($hash eq $args{SHASIGN}) {
  	warn "payonline process_response:: hash chk FAILED : $id_trans ";
  	return;
  }
	
	$args{offline} = 1 if $trans->{etat} eq 'payé';
  if ($args{offline}) {
warn "payonline process_response: offline status change :  PAYID=$args{PAYID}, STATUS=$args{STATUS}\n";

		if ($args{STATUS} eq '9') {
			if ($etat ne 'payé') {
				#	- update etat
				update_transact ($id_trans);
				# - notify 
				notify ($trans, $inst);
			}
		}
		if ($args{STATUS} eq '2') {
			if ($etat eq 'payé') {
				#	- update etat
				update_transact ( $id_trans);
				# - notify 
				notify ($trans, $inst);
			}
		}
		return;
  }

	update_transact ($id_trans);
	# - notify 
	notify ($trans, $inst);
 
  postResult ($id_trans, $args{STATUS} eq '9', );

}

#------
sub notify {
	my ($trans, $inst) = @_;
	my $id_trans = $trans->{id};
#warn "-> notify trans\n".Dumper($trans);
	return unless $id_trans;

  my $query	= payonline_tools::getQuery ($id_trans);
	my $email = $payonline_tools::DEBUG ? '' : $query->{Email};
	my $lang 	= $query->{lang} ? $query->{lang} : 'en';
	
  my ($msg, $subj, $status);
  $status = $messages{$lang}->[1] if $args{STATUS} eq '9';
  $status = $messages{$lang}->[7] if $args{STATUS} eq '2';

warn "--> notify : status=$status, STATUS=$args{STATUS}\n";
  if ($args{offline}) {
		$msg, $subj = qq{EPFL payonline: $messages{$lang}->[8]\n};
	} else {
		$subj = qq{EPFL payonline: $status\n};
	}

	my $msg = qq{
	$status

		$inst->{descr}

	$messages{$lang}->[2] $id_trans
	$messages{$lang}->[3] $args{PAYID}
	$messages{$lang}->[4] $args{PM} $args{BRAND}
	Date : $trans->{datecr}
	$messages{$lang}->[5] $query->{Total} $query->{Currency}

	$messages{$lang}->[6]
		$query->{FirstName} $query->{LastName}
		$query->{Addr}
		$query->{Country}, $query->{ZipCode} $query->{City}

	};

  payonline_tools::send_mail_bc ($email, $inst->{mailinst}, $subj, $msg);
warn "notify to: $email,$inst->{mailinst} ; subj=$subj\n";		

}

#------
sub update_transact {
	my $id_trans = shift;
	my $etat = $args{STATUS} eq '9' ? 'payé' : '';
  my $sql = qq{update transact set
   etat=?,
	 datecr=Now(),
	 paymode=?, 
	 PaymentID=? 
	 where id=?};
  my $sth = payonline_tools::dbquery ($sql, ($etat, "$args{PM} $args{BRAND}", $args{PAYID}, $id_trans));
warn "update transact $id_trans: STATUS=$args{STATUS}, etat=$etat\n";
  $sth->finish ();

}

#------
sub result {

  my $id_trans 	 = $args{orderID};
  my $resultcode = $args{code};
  my $errmsg;

warn " ==>> payonline result: args dump <<==\n";
 foreach my $item (keys %args) {
    warn "   $item=$args{$item}\n";
 }
  
  $resultcode		 = $args{STATUS} eq '9' ? '1' : '0';

  process_response();

warn "==> result id_trans=$id_trans :: resultcode=$resultcode \n";
  
  unless ($id_trans) {
	  $errmsg 	= qq{no transaction id};
	  $tmpldir 	=~ s/XX/$lang/;
	  my $template	= initTempl('result.tmpl');
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
	  exit;
  }
  
  my $trans= payonline_tools::getTrans ($id_trans,'');
  unless ($trans) {
	  $errmsg 	= qq{unknown transaction : $id_trans};
	  $tmpldir 	=~ s/XX/$lang/;
	  my $template	= initTempl('result.tmpl');
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
	  exit;
  }

  my $sql  = qq{select * from instances where id=?};
  my $sth  = payonline_tools::dbquery ($sql, ($trans->{id_inst}));
  my $inst = $sth->fetchrow_hashref();
  unless ($inst) {
	  postResult ($id_trans, 0, );
	  $errmsg  = qq{<br>no such instance : $trans->{id_inst} }  ;
	  $tmpldir 	=~ s/XX/$lang/;
	  my $template	= initTempl('result.tmpl');
	  $template->param(txtOrderIDShop => $id_trans);
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
	  exit;
  }
  
  $resultcode 				= '' if $trans->{etat} ne 'payé';
  my $resp  				= payonline_tools::getPersonInfos ($inst->{sciper});
  my $query					= payonline_tools::getQuery ($id_trans);
  my $email 				= $query->{Email};
  $lang 					= $query->{lang} ? $query->{lang} : 'en';
  $tmpldir 					=~ s/XX/$lang/;

  my $tmpl_file = $noHeaderInsts =~ /$trans->{id_inst}/ ? 'result-noheader.tmpl' : 'result.tmpl';
  my $template	= initTempl($tmpl_file);
  $template->param(OrderIDShop 	=> $id_trans);
  $template->param(Currency 	=> $query->{Currency});
  $template->param(Total 		=> $query->{Total});
  $template->param(LastName 	=> payonline_tools::utf8tolatin1($query->{LastName}));
  $template->param(FirstName 	=> payonline_tools::utf8tolatin1($query->{FirstName}));
  $template->param(Email 		=> $email);
  $template->param(Tel 			=> $query->{Phone});
  $template->param(Fax 			=> $query->{Fax});
  $template->param(Addr 		=> payonline_tools::utf8tolatin1($query->{Addr}));
  $template->param(ZipCode 		=> $query->{ZipCode});
  $template->param(City 		=> $query->{City});
  $template->param(Country 		=> $query->{Country});
  $template->param(ResultCode	=> $resultcode);
  $template->param(TransactionID=> $trans->{PaymentID});

  if ($inst->{contact}) {
	  $template->param(Resp 		=> $inst->{contact});
	  $template->param(RespMail 	=> $inst->{contact});
  } else {
	  $template->param(Resp 		=> "$resp->{prenom} $resp->{nom}");
	  $template->param(RespMail 	=> $resp->{mail});
  }


  my $queryArgs   = payonline_tools::getArgs($trans->{query});
  my $id_transact = $queryArgs->{id_transact};

  my $urlconf = $inst->{urlconf};
  unless ($urlconf =~ /^http\:\/\// or $urlconf =~ /^https\:\/\//) {
  	$urlconf  = 'http://'.$urlconf ;
  }
  
  if ($id_transact) {
warn "==> result : id_transact=$id_transact\n";
	  if ($urlconf =~ /\?/) {
		$urlconf =~ s/&$//;
		$urlconf .= qq(&id_transact=$id_transact);
	  } else {
		$urlconf =~ s/\?$//;
		$urlconf .= qq(?id_transact=$id_transact);
	  }
  }  

warn "==> result : urlconf=$urlconf\n";
  $template->param(URL 			=> $urlconf);
  $template->param(Descr 		=> $inst->{descr});
  $template->param(Date			=> $trans->{datecr});
  $template->param(PayMode		=> $trans->{paymode});

warn "==> result id_trans=$id_trans :: etat=$trans->{etat}, resultcode=$resultcode\n";

  if ($trans->{etat} ne 'payé' or $resultcode ne '1') {
    $errmsg = ($lang eq 'en') ? qq{payment failed} : qq{échec paiement};
    postResult ($id_trans, 0, );
    $template->param(sErrMsg 		=> $errmsg);
    print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
    exit;
  }
  
  # - Send email
  #...
  
#  postResult ($id_trans, $resultcode, $trans);

  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
  exit;
}

#------
sub initTempl {
   my ($tmplpath) = @_;

warn "initTempl: $tmpldir$tmplpath\n";
   my $template = HTML::Template->new(filename => $tmpldir.$tmplpath,
	   strict => 0,
	   cache => 1,
	   die_on_bad_params => 0) or die "err : $!";

   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   $year += 1900;
   $template->param(sCrtYear 	=> $year);
   $template->param(sPathMe 	=> $me);
   $template->param(sDebug 	=> $payonline_tools::DEBUG ? $messages{$lang}->[0] : '');
   return $template;
}

#------
sub postResult {
	my $id_trans= shift;
	my $result  = shift;
	my $trans		= shift;
	
	warn "payonline :: do :postResult 1 : $id_trans, $result, $trans\n";  
	return unless $id_trans;  
	$trans = payonline_tools::getTrans ($id_trans, '');
	return unless $trans;
	my $id_inst	  = $trans->{id_inst};
	return unless $id_inst;
	$result	  = $trans->{etat} eq 'payé' ? 1 : 0;
	my $sql = qq{select url from instances where id=?};
	my $sth = payonline_tools::dbquery ($sql, ($id_inst));
	my $inst = $sth->fetchrow_hashref ();
	return unless $inst;
	my $url	  = $inst->{url};
	my $queryArgs   = payonline_tools::getArgs($trans->{query});
	my $id_transact = $queryArgs->{id_transact};
	my $informreturnaddress = $queryArgs->{informreturnaddress};
	warn "payonline :: do :postResult 5 url:$url,informreturnaddress:$informreturnaddress,id_transact=$id_transact\n";  

	do_post ($id_transact, $result, $trans, $url, $queryArgs) 	  	 if $url and $id_transact;
	do_post ($id_transact, $result, $trans, $informreturnaddress,'') if $informreturnaddress and $id_transact;

}

#____________
sub do_post {
  my ($id_transact, $result, $trans, $url, $queryArgs) = @_;

use LWP::UserAgent; 
  my $ua = new LWP::UserAgent;
  push @{ $ua->requests_redirectable }, 'POST';

warn "do_post a : $url, $id_transact, $result\n";

  my $postdata    = {
  	id_transact	=> $id_transact,
  	result		=> $result,
  	datecr		=> $trans->{datecr},
  	PaymentID	=> $trans->{PaymentID},
  	paymode	=> $trans->{paymode},
  };
  
  if ($queryArgs) {
		foreach my $key (keys %$queryArgs) {
			next if $key eq 'id_transact';
			my $elem = $queryArgs->{$key};
			$postdata->{$key} = $elem ;
		}
  }

  my $response = $ua->post($url, $postdata);

  my $content  = $response->decoded_content();
warn "do_post done : $content\n";

}
