#!/usr/bin/perl
#
##############################################################################
#
# Service Name  payonline 
#	File Name			do
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005-2019
#
#########################################################################
#####
#
#

use strict;
use HTML::Template;
use LWP::UserAgent; 

use payonline_tools;

use vars qw(%args $tmpldir $lang $errmsg $crtdate $usessl $messages	);

use utf8::all;
binmode(STDOUT, ":utf8");

require 'messages.txt';

my $me 		= $ENV {SCRIPT_NAME};
my $pi 		= $ENV {PATH_INFO};
my $lang 	= 'en';
my $tmpldir = '/var/www/vhosts/payonline.epfl.ch/private/tmpl/';
my $logfile	= '/var/log/httpd/payonline.log';
my $contact_sf = 'e-payment@epfl.ch';

my %errmsgs	= (
	fr => [
		' *** Attention : version de test. Ne pas utiliser, svp ! ***',	
		'Confirmation de paiement',
		'Transaction :',
		'PostFinance ID :',
		'Méthode de paiement :',
		'Total :',
		'Au nom de :',
		'Paiement refusé',
		'Changement de statut de la transaction',
	      ],
	en => [
		' *** Warning : test version. Not for public usage ! ***',	# 15
		'Payment Confirmation',
		'Transaction :',
		'PostFinance ID :',
		'Payement method:',
		'Total :',
		'Paid for :',
		'Payment refused',
		'Transaction status changed',
	      ],
	);

my $verbose = '1';

$| = 1;

  payonline_tools::setLog($logfile);
  %args			= payonline_tools::loadargs ();
  $crtdate 	= payonline_tools::getcrtdate();

  payonline_tools::init ();
 
  dispatch ();
  exit;

#------
sub dispatch {

   if      ($pi =~  /^\/cert/) {
   	$args{fail}    = 1 if   ($pi =~ /fail/);
   	$args{offline} = 1 if   ($pi =~ /offline/);
   	cert ();
   } elsif ($pi =~  /^\/result/) {
   	result ();
   } 
}

#------
sub cert {
  my $cgi_success = "Content-Type: text/html; charset=utf-8\n\n";

  my $YPSrv = $ENV{REMOTE_ADDR};
  return unless $YPSrv;
  log_event "do::cert", YPSrv => $YPSrv, %args;
  unless (payonline_tools::is_known_postfinance_ip($YPSrv)) {
    log_event("do::cert", error => "unknown server in static list");
		if (! payonline_tools::is_ip_in_postfinance_ranges($YPSrv)) {
                  log_event("do::cert: illegal access", id_trans => $args{orderID});
			my $msg = qq{error :: id_trans=$args{orderID} illegal access from server IP=$YPSrv};
			payonline_tools::send_mail ('payonline-ops@groupes.epfl.ch', 'payonline ERROR :: unknown Postfinance server', $msg);
		}
  }

  my $id_trans = $args{orderID};
  return unless $id_trans;
  return if  $id_trans =~ /select/i;
  return if  $id_trans =~ /insert/i;
  return if  $id_trans =~ /update/i;

  my $query	= payonline_tools::getQuery ($id_trans);
  return unless $query;
  log_event("do::cert", query_status => "OK");

  # - get transaction data
  my $trans= payonline_tools::getTrans ($id_trans, '');
  unless ($trans) {
    log_event("do::cert", error => "id_trans not found", id_trans => $id_trans);
    return;
  }
  
  # - get instance data
  my $sql  = qq{select * from instances where id=?};
  my $sth  = payonline_tools::dbquery ($sql, ($trans->{id_inst}));
  my $inst = $sth->fetchrow_hashref();
  unless ($inst) {
    log_event("do::cert", error => "instance not found", id_trans => $id_trans);
  	return;
  }
  my $etat = $inst->{etat};
  log_event("do::cert", %$inst);

# - check hash --------
  my $hashdata = {
	orderID 	=> $args{orderID},
	currency 	=> $args{currency},
	amount 		=> $args{amount},
	PM 			=> $args{PM},
	ACCEPTANCE 	=> $args{ACCEPTANCE},
	STATUS 		=> $args{STATUS},
	CARDNO 		=> $args{CARDNO},
	PAYID 		=> $args{PAYID},
	NCERROR 	=> $args{NCERROR},
	BRAND 		=> $args{BRAND},
  };
  my $check_hash = YellowPayFlow::Payonline->by_instance($inst)->makeHash($hashdata);
  unless ($check_hash eq $args{SHASIGN}) {
    log_event("do::cert", error => "HMAC mismatch", id_trans => $id_trans,
              computed_hash => $check_hash, received_hash => $args{SHASIGN});
    return;
  }
	
	my $msg = qq{		
	orderID 	=> $args{orderID},
	currency 	=> $args{currency},
	amount 		=> $args{amount},
	PM 			=> $args{PM},
	ACCEPTANCE 	=> $args{ACCEPTANCE},
	STATUS 		=> $args{STATUS},
	CARDNO 		=> $args{CARDNO},
	PAYID 		=> $args{PAYID},
	NCERROR 	=> $args{NCERROR},
	BRAND 		=> $args{BRAND},	
	};
	#	- failed transaction - notify
  if ($args{fail}) {
    log_event("do::cert", status => "cancel", PAYID => $args{PAYID},
              STATUS => $args{STATUS});
		$msg = qq{PAYONLINE FAILED TRANSACTION}.$msg;
    payonline_tools::send_mail ('payonline-ops@groupes.epfl.ch', "payonline FAILED TRANSACTION : status=$args{STATUS}", $msg);
    print $cgi_success; return;
  }

	#	- offline transactions
	$args{offline} = 1 if $trans->{etat} eq 'payé';
  if ($args{offline}) {
    log_event("do::cert", status => "offline status change", PAYID => $args{PAYID}, STATUS => $args{STATUS});

		if ($args{STATUS} eq '93') {
		#	- TRANSACTION REFUSED
			if ($trans->{etat} eq 'payé') {
				#	- update etat
				my $sql = qq{update transact set
				 etat='',
				 paymode=?, 
				 PaymentID=? 
				 where id=?};
				my $sth = payonline_tools::dbquery ($sql, ("$args{PM} $args{BRAND}", $args{PAYID}, $id_trans));
				# - notify 
				$msg = qq{payonline : TRANSACTION REFUSED
				
	$inst->{descr}

	ID transact: $id_trans
	PostfianceID: $args{PAYID}
	Pay Mode: $args{PM} $args{BRAND}
	Date : $trans->{datecr}
	Total: $query->{Total} $query->{Currency}

	Paid for
		$query->{FirstName} $query->{LastName}
		$query->{Addr}
		$query->{Country}, $query->{ZipCode} $query->{City}
				
				};
			my $dest = 'payonline-ops@groupes.epfl.ch,'.$contact_sf ;
				 $dest .= ','.$inst->{mailinst} if $inst->{mailinst};
				 $dest .= ','.$inst->{contact}  if $inst->{contact};
				 $dest .= ','.$query->{Email} 	if $query->{Email};
				 $dest =~ s/,is-academia\@groupes.epfl.ch//;
				 $dest =~ s/^,//;
				 $dest =~ s/,$//;
                                 log_event("do::cert", status => "offline transaction refused", id_trans => $id_trans, send_mail_to => $dest);
				#	- notify instance conact
				payonline_tools::send_mail ($dest, "payonline OFFLINE TRANSACTION REFUSED : $id_trans", $msg);

			}
		}

    print $cgi_success; return;
  }

  if ($trans->{etat} eq 'payé') {
    log_event("do::cert", level => "warning", status => "transaction already paid",
              id_trans => $id_trans, STATUS => $args{STATUS});
		my $msg = qq{error :: id_trans=$id_trans :: transaction already paid, status=$args{STATUS}	};
		if ($args{STATUS} eq '2') {
			my $sql = qq{update transact set etat='' where id=?};
			my $sth = payonline_tools::dbquery ($sql, ($id_trans));
			$sth->finish ();
                        log_event("do::cert", level => "critical", status => "transaction downgraded from 'already paid' to 'refused'");
			$msg .= qq{
			transaction refused : status updated
			};
		}
		payonline_tools::send_mail ('payonline-ops@groupes.epfl.ch', "payonline WARNING :: transaction paid: status=$args{STATUS}", $msg);
    print $cgi_success; return;
  } else {
		if ($args{STATUS} eq '2') {
                        log_event("do::cert", status => "transaction refused", id_trans => $id_trans);
                        print $cgi_success; return;
		}
  }

  my $sql = qq{update transact set
  	 etat='payé',
	 datecr=Now(),
	 paymode=?, 
	 PaymentID=? 
	 where id=?};
  my $sth = payonline_tools::dbquery ($sql, ("$args{PM} $args{BRAND}", $args{PAYID}, $id_trans));
  log_event "do::cert", status => "OK", id_trans => $id_trans, email => $query->{Email};
  $sth->finish ();

 my $email = $etat eq 'prod' 
 					 ? $query->{Email}
 					 : 'payonline-ops@groupes.epfl.ch';
  $lang		 = $query->{lang} ? $query->{lang} : 'en';
  my $msg  = qq{
	$errmsgs{$lang}->[1]

		$inst->{descr}

	$errmsgs{$lang}->[2] $id_trans
	$errmsgs{$lang}->[3] $args{PAYID}
	$errmsgs{$lang}->[4] $args{PM} $args{BRAND}
	Date : $trans->{datecr}
	$errmsgs{$lang}->[5] $query->{Total} $query->{Currency}
	
	$errmsgs{$lang}->[6]
	$query->{FirstName} $query->{LastName}
	$query->{Addr}
	$query->{Country}, $query->{ZipCode} $query->{City}
	};
	if ( $payonline_tools::exceptions->{$inst->{id}}) {
		$payonline_tools::mailFrom = $payonline_tools::exceptions->{$inst->{id}}->{mailFrom};
		if ($query->{anonymous}) {
			$msg .= qq{
	Anonymous donation
			};
			$email = '';
		} else {
			my $date = substr ($trans->{datecr}, 0, 10);
			$msg = qq{
Madame, Monsieur,
 
Par la présente, nous vous confirmons la réception de votre donation de $query->{Total} $query->{Currency} pour le $query->{purpose} faite le $date.  Nous vous en sommes très reconnaissants.
 
L'Ecole Polytechnique Fédérale de Lausanne (ci-après EPFL) est un établissement de droit public doté de la personnalité juridique.  Notre établissement est considéré d'utilité publique, exempté des impôts fédéraux, cantonaux, et communaux.
 
Les donations faites à l'EPFL peuvent être déduites fiscalement selon les normes cantonales et fédérales en vigueur. L'EPFL vous enverra une attestation à cet effet dans les meilleurs délais.
 
En vous remerciant à nouveau de votre soutien, nous vous envoyons nos sincères salutations,
 
Nathalie Fontana
Directrice de la Philanthropie
 
 
Dear $query->{FirstName} $query->{LastName},
 
We hereby acknowledge receipt of your donation of $query->{Total} $query->{Currency} on $date for the $query->{purpose}.  We are extremely grateful for your generous contribution.
 
EPFL is a public institution and benefits from a non-profit status meaning that donations are tax deductible in accordance with cantonal and federal norms. EPFL will send you an official receipt as soon as possible.
 
Once again, please accept our sincere gratitude for your donation.
 
Best wishes,
 
Nathalie Fontana
Director of Philanthropy
			};
		}
		if ($query->{Total} >= $payonline_tools::exceptions->{$inst->{id}}->{alertOn} &&
				$payonline_tools::exceptions->{$inst->{id}}->{alertTo}) 
		{
			$payonline_tools::mailBcc = $payonline_tools::exceptions->{$inst->{id}}->{alertTo};
                  log_event "do::cert", donation_exception => $inst->{id},
                    mailBcc => $payonline_tools::mailBcc;
		}
	}

  postResult ($id_trans, 1, );

	payonline_tools::send_mail_bc ($email, $inst->{mailinst}, 'EPFL payonline :: payment confirmation', $msg);
#    payonline_tools::send_mail ($email, 'EPFL payonline :: payment confirmation', $msg);
  log_event "do::cert:confirmation_email", to => $email, mailinst => $inst->{mailinst};

  print $cgi_success; exit;
}

#------
sub result {

  my $id_trans 	 = $args{orderID};
  my $resultcode = $args{code};
  my $errmsg;

  log_event "do::result", id_trans => $id_trans, resultcode => $resultcode;
  
  unless ($id_trans) {
	  $errmsg 	= qq{no transaction id};
	  my $template	= initTempl('result.tmpl');
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
	  exit;
  }
  
  my $trans= payonline_tools::getTrans ($id_trans,'');
  unless ($trans) {
	  $errmsg 	= qq{unknown transaction : $id_trans};
	  $tmpldir 	=~ s/XX/$lang/;
	  my $template	= initTempl('result.tmpl');
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
	  exit;
  }

  my $sql  = qq{select * from instances where id=?};
  my $sth  = payonline_tools::dbquery ($sql, ($trans->{id_inst}));
  my $inst = $sth->fetchrow_hashref();
  unless ($inst) {
	  postResult ($id_trans, 0, );
	  $errmsg  = qq{<br>no such instance : $trans->{id_inst} }  ;
	  my $template	= initTempl('result.tmpl');
	  $template->param(txtOrderIDShop => $id_trans);
	  $template->param(sErrMsg 		=> $errmsg);
	  print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
	  exit;
  }
  
  $resultcode 	= '' if $trans->{etat} ne 'payé';
  my $resp  		= Payonline::User->by_sciper($inst->{sciper});
  my $query			= payonline_tools::getQuery ($id_trans);
  my $email 		= $query->{Email};
  $lang 				= $query->{lang} ? $query->{lang} : 'en';

  my $tmpl_file = $inst->{bypass_return} ? 'result-noheader.tmpl' : 'result.tmpl';
  my $template	= initTempl($tmpl_file);

  $template->param(OrderIDShop 	=> $id_trans);
  $template->param(Currency 		=> $query->{Currency});
  $template->param(Total 				=> $query->{Total});
  $template->param(LastName 		=> $query->{LastName});
  $template->param(FirstName 		=> $query->{FirstName});
  $template->param(Email 				=> $email);
  $template->param(Tel 					=> $query->{Phone});
  $template->param(Fax 					=> $query->{Fax});
  $template->param(Addr 				=> $query->{Addr});
  $template->param(ZipCode 			=> $query->{ZipCode});
  $template->param(City 				=> $query->{City});
  $template->param(Country 			=> $query->{Country});
  $template->param(ResultCode		=> $resultcode);
  $template->param(TransactionID=> $trans->{PaymentID});

  if ($inst->{contact}) {
	  $template->param(Resp 		=> $inst->{contact});
	  $template->param(RespMail 	=> $inst->{contact});
  } else {
	  $template->param(Resp 		=> "${\$resp->prenom} ${\$resp->nom}");
	  $template->param(RespMail 	=> $resp->mail);
  }


  my $queryArgs   = payonline_tools::getArgs($trans->{query});
  my $id_transact = $queryArgs->{id_transact};

  my $urlconf = $inst->{urlconf};
  
  if ($urlconf) {
		unless ($urlconf =~ /^http\:\/\// or $urlconf =~ /^https\:\/\//) {
			$urlconf  = 'http://'.$urlconf ;
		}
		if ($id_transact) {
                  log_event "do::result", id_transact => $id_transact;
			if ($urlconf =~ /\?/) {
				$urlconf =~ s/&$//;
				$urlconf .= qq(&id_transact=$id_transact);
			} else {
				$urlconf =~ s/\?$//;
				$urlconf .= qq(?id_transact=$id_transact);
			}
		}
		my $sOnLoad 	= qq{onload="window.location.href='$urlconf';"} if $inst->{bypass_return} && $resultcode;
		$template->param(sOnLoad	=> $sOnLoad);
                  log_event "do::result", urlconf => $urlconf;
		$template->param(URL 			=> $urlconf);
	}

  $template->param(Descr 		=> $inst->{descr});
  $template->param(Date			=> $trans->{datecr});
  $template->param(PayMode	=> $trans->{paymode});
  log_event "do::result", id_trans => $id_trans, etat => $trans->{etat},
    resultcode => $resultcode;

  unless ( $resultcode ) {
		if ($trans->{etat} eq 'payé') {
			#	- update transaction to failed
			my $sql = qq{update transact set etat='' where id=?};
			my $sth = payonline_tools::dbquery ($sql, $id_trans);
                        log_event "do::result", status => "update failed",
                          id_trans => $id_trans;
			
			my $msg = qq{TRANSACTION FAILED		
			$inst->{descr}

			orderID 	=> $id_trans,
			PAYID 		=> $trans->{PaymentID},
			Total 		=> $query->{Total},
			Currency 	=> $query->{Currency},
			BRAND 		=> $query->{BRAND},	
			};

			#	- notify 
			my $dest = 'payonline-ops@groupes.epfl.ch,'.$contact_sf ;
				 $dest .= ','.$inst->{mailinst} if $inst->{mailinst};
				 $dest .= ','.$inst->{contact}  if $inst->{contact};
				 $dest .= ','.$query->{Email} 	if $query->{Email};
				 $dest =~ s/^,//;
				 $dest =~ s/,$//;
                        log_event "do::result", step => "send mail", to => $dest;
			payonline_tools::send_mail ($dest, "payonline TRANSACTION REFUSED : $id_trans", $msg);
			
		}

    postResult ($id_trans, 0, );

    $errmsg = ($lang eq 'en') ? qq{payment failed} : qq{échec paiement};
    $template->param(sErrMsg 		=> $errmsg);
    print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
    exit;

	}

  print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
  exit;
}

#------
sub initTempl {
   my ($tmplpath) = @_;

   my $template = HTML::Template->new(filename => $tmpldir.$tmplpath,
	   strict => 0,
	   cache => 1,
           utf8 => 1,
	   die_on_bad_params => 0) or die "err : $!";

   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   $year += 1900;
   $template->param(sCrtYear 	=> $year);
   $template->param(sPathMe 	=> $me);
   $template->param(sDebug 	=> $payonline_tools::DEBUG ? $errmsgs{$lang}->[0] : '');
   $template->param(sLangFR		=> 1) if $lang eq 'fr';

	 foreach my $msg (keys %{$messages}) {
	 	next unless $msg;
   	$template->param($msg	=> $messages->{$msg}->{$lang}) if $messages->{$msg}->{$lang};
	 }

   return $template;
}

#------
sub postResult {
	my $id_trans= shift;
	my $result  = shift;
	my $trans		= shift;
	
        log_event "do::postResult", step => 1, id_trans => $id_trans, result => $result, trans => $trans;
	return unless $id_trans;
        log_event "do::postResult", step => 2;
	$trans = payonline_tools::getTrans ($id_trans, '');
	return unless $trans;
	my $id_inst	  = $trans->{id_inst};
	return unless $id_inst;
        log_event "do::postResult", step => 3, result => $result;
	my $sql = qq{select url from instances where id=?};
	my $sth = payonline_tools::dbquery ($sql, ($id_inst));
	my $inst = $sth->fetchrow_hashref ();
	return unless $inst;
	my $url	  = $inst->{url};
	my $queryArgs   = payonline_tools::getArgs($trans->{query});
	my $id_transact = $queryArgs->{id_transact};
	my $informreturnaddress = $queryArgs->{informreturnaddress};
        log_event "do::postResult", step => 5, url => $url,
          informreturnaddress => $informreturnaddress,
          id_transact => $id_transact;

	do_post ($id_transact, $result, $trans, $url, $queryArgs) 	  	 if $url and $id_transact;
	do_post ($id_transact, $result, $trans, $informreturnaddress,'') if $informreturnaddress and $id_transact;

}

#____________
sub do_post {
  my ($id_transact, $result, $trans, $url, $queryArgs) = @_;

  my $ua = new LWP::UserAgent;
  push @{ $ua->requests_redirectable }, 'POST';

  log_event "do::do_post", step => "start", url => $url, id_transact => $id_transact,
    result => $result;
	#	- confirmation token if URL Return - but not to inform
	my $token = payonline_tools::makeToken ($id_transact, $trans) if $queryArgs && !$queryArgs->{informreturnaddress};
  my $postdata    = {
  	id_transact	=> $id_transact,
  	id_trans		=> $trans->{id},
  	id_inst			=> $trans->{id_inst},
  	token				=> $token,
  	result			=> $result,
  	datecr			=> $trans->{datecr},
  	PaymentID		=> $trans->{PaymentID},
  	paymode			=> $trans->{paymode},
  };

  log_event "do::do_post", step => "postdata", postdata => $postdata;

  if ($queryArgs) {
		foreach my $key (keys %$queryArgs) {
			next if $key eq 'id_transact';
			my $elem = $queryArgs->{$key};
			$postdata->{$key} = $elem ;
		}
  }

  my $response = $ua->post($url, $postdata);

  my $content  = $response->decoded_content();
  $content =~ s/^(.{4096})(.*$)/$1 + "[...]"/s;
  log_event "do::do_post", step => "done", content => $content;
}
