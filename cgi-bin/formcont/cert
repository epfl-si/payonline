#!/usr/bin/perl
#
##############################################################################
#
# File Name:    ress.pl
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

use strict;
use payonline_tools;
use formcont_tools;

use vars qw(%args $lang $errmsg $crtdate $usessl
	);

use utf8::all;
binmode(STDOUT, ":utf8");

my $me 		= $ENV {SCRIPT_NAME};
my $pi 		= $ENV {PATH_INFO};
my $lang 	= 'en';

my %errmsgs	= (
	fr => [
		' *** Attention : version de test. Ne pas utiliser, svp ! ***',	
		'Confirmation de paiement',
		'Transaction :',
		'PostFinance ID :',
		'Méthode de paiement :',
		'Total :',
		'Au nom de :',
	      ],
	en => [
		' *** Warning : test version. Not for public usage ! ***',	# 15
		'Payment Confirmation',
		'Transaction :',
		'PostFinance ID :',
		'Payement method:',
		'Total :',
		'Paid for :',
	      ],
	);

my $verbose = '1';
%args		= payonline_tools::loadargs ();
$crtdate 	= payonline_tools::getcrtdate();

cert ();

exit;
  
#_________
sub cert {

	print "Content-Type: text/html; charset=UTF-8\n\n";
	my $YPSrv = $ENV{REMOTE_ADDR};
	return unless $YPSrv;
        log_event "formcont/cert::cert", YPSrv => $YPSrv, %args;
	return unless (payonline_tools::is_known_postfinance_ip($YPSrv));

	unless ($args{result}) {
          log_event "formcont/cert::cert", level => "error", transaction => $args{orderID},
            result => $args{result};
#		exit;
	}

	my $trans	= payonline_tools::getTrans ($args{orderID});
	$trans->{total} = $args{amount};

	my $id_trans = $trans->{id};
        log_event "formcont/cert::cert", id_trans => $id_trans;
	return unless $id_trans;
	return if  $id_trans =~ /select/i;
	return if  $id_trans =~ /insert/i;
	return if  $id_trans =~ /update/i;

	my $hashdata = {
	orderID 	=> $args{orderID},
	currency 	=> $args{currency},
	amount 		=> $args{amount},
	PM 			=> $args{PM},
	ACCEPTANCE 	=> $args{ACCEPTANCE},
	STATUS 		=> $args{STATUS},
	CARDNO 		=> $args{CARDNO},
	PAYID 		=> $args{PAYID},
	NCERROR 	=> $args{NCERROR},
	BRAND 		=> $args{BRAND},	
	};

	my $check_hash 	= YellowPayFlow::FormCont->current->makeHash ($hashdata);

	# - check hash --------
        log_event("formcont/cert::cert", step => "HMAC check", id_trans => $id_trans,
              computed_hash => $check_hash, received_hash => $args{SHASIGN});

	unless ($check_hash eq $args{SHASIGN}) {
          log_event("formcont/cert::cert", error => "HMAC mismatch", id_trans => $id_trans,
              computed_hash => $check_hash, received_hash => $args{SHASIGN});
		return;
	}
	
	# 	- post result if id_transact
	do_post( $trans, $args{result} ) if $trans->{id_transact};

	if ($args{result} eq '1') {
		my $sql = qq{update transact set
		 etat='payé',
		 paymode='$args{PM} $args{BRAND}', 
		 PaymentID='$args{PAYID}' 
		 where id='$id_trans'};
		my $sth = formcont_tools::dbquery($sql);
                log_event "formcont/cert::cert", status => "OK", id_trans => $id_trans;
		$sth->finish ();

		# 	- send email
		my $email = $trans->{email};

		my $msg = qq{
		Confirmation de paiement

		Transaction : $args{orderID}
		PostFinance ID : $args{PAYID}
		Méthode de paiement : $args{PM} $args{BRAND}
		Total : $args{amount} CHF
		Au nom de : $trans->{name} $trans->{firstname}
		$trans->{email}
		$trans->{city}

		};

		#  payonline_tools::send_mail_bc ($email, $inst->{mailinst}, 'EPFL formcont :: payment confirmation', $msg);
		formcont_tools::send_mail ($email, 'Formation continue UNIL/EPFL :: payment confirmation', $msg);

                log_event("formcont/cert::cert", confirmation_email_to => $email, msg => $msg);
	}
	
	exit;

}

#____________
sub do_post {
	my ($trans, $result) = @_;

	my $id_transact = $trans->{id_transact};

        log_event "formcont/cert::do_post", id_transact => $id_transact, result => $result;

	return unless $id_transact;

	my $url 	  = $formcont_tools::postURL;
	my $datecr	  = $trans->{datecr};
	   $datecr	  =~ s/ /+/g;
	my $PaymentID = $trans->{PaymentID};
	my $paymode	  = $trans->{paymode};
	$paymode	  =~ s/ /+/g;
	my $total	  = $trans->{total};

	use LWP::UserAgent; 

	my $ua = new LWP::UserAgent;
	push @{ $ua->requests_redirectable }, 'POST';

        log_event "formcont/cert::do_post", url => $url, result => $result;

	my $postdata    = {
		id_transact	=> $id_transact,
		result		=> $result,
		datecr		=> $trans->{datecr},
		PaymentID	=> $trans->{PaymentID},
		paymode		=> $trans->{paymode},
	};

	my $queryArgs   = payonline_tools::getArgs($trans->{query});
	if ($queryArgs) {
		foreach my $key (keys %$queryArgs) {
			next if $key eq 'id_transact';
			my $elem = $queryArgs->{$key};
			$postdata->{$key} = $elem ;
		}
	}

	my $response = $ua->post($url, $postdata);
	my $content  = $response->decoded_content();
        log_event "formcont/cert::do_post", step => "done", content => $content;

}
