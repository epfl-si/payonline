#!/usr/bin/perl
#
##############################################################################
#
# File Name:    ress.pl
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

use strict;
use payonline_tools;

use vars qw( %args $lang $errmsg $crtdate );

	my $me 		= $ENV {SCRIPT_NAME};
	my $us 		= $ENV {SERVER_NAME};
	my $qs 		= $ENV {QUERY_STRING};
	my $pi 		= $ENV {PATH_INFO};
	my $verbose = '1';

	%args		= payonline_tools::loadargs ();
	$crtdate 	= payonline_tools::getcrtdate();
	$lang 		= $args{lang} ? $args{lang} : 'en' ;

warn "==> done test \n";

	cert() 		if ($pi =~  /^\/cert/);
	redirect();

	exit;
  
#_________
sub redirect {

	my %msgs	= (
	fr => [
		'Paiement en ligne échoué',
		'Paiement en ligne effectué',
		'Paiement en ligne en attente',
		'Vous allez recevoir une confirmation à l\'adresse mail saisie sur le formulaire',
		'Nom',
		'Montant',
		'Payé par',
		'Veuillez contacter directement le support de Postfinance à l\'adresse : shopperhelp@postfinance.ch avec les détails de votre transaction',
	],
	en => [
		'On line payment failed',
		'On line payment successfull',
		'On line payment pending',
		'You will receive a mail confirmation at the address you provided on the form',
		'Name',
		'Amount',
		'Payed by',
		'Please contact Postfinance\'s support at : shopperhelp@postfinance.ch and provide all details of the transaction',
	],
	);

	payonline_tools::header ();

#	foreach my $item (keys %args) {
#		warn "formcont done redirect :: $item=$args{$item}\n";
#	}  

	my $trans	 = payonline_tools::getTrans ($args{orderID});
	my $id_trans = $trans->{id};
	return unless $id_trans;
	my $id_transact = $trans->{id_transact};

	print qq{<h2>Formation continue UNIL/EPFL</h2>};
	if ($args{result} eq '0') {	# - ko
		print qq{<h3 style="color:red;">$msgs{$lang}->[0]</h3>};
	} elsif ($args{result} eq '1') {	# - ok
		print qq{<h3>$msgs{$lang}->[1]</h3>
		$msgs{$lang}->[3].<br>
		};
	} elsif ($args{result} eq '2') {	# - ...
		print qq{<h3>$msgs{$lang}->[2]</h3>};
	} else {
	}

	print qq{
		$msgs{$lang}->[4] : $args{CN}<br>
		$msgs{$lang}->[5] : $args{amount} $args{currency}<br>
		PAYID : $args{PAYID}<br>
		$msgs{$lang}->[6] : $args{BRAND}<br>
		Date : $args{TRXDATE}<br>
	};
	
	unless ($args{result} eq '1') {
		print qq{
		<p>$msgs{$lang}->[7].
		</p>
		};
	}
	
warn "formcont done : origin=$trans->{origin}\n";

	unless ( $trans->{origin} ) {
warn "formcont done redirect for id_transact=$id_transact\n";
		print qq{
		<script language="javascript">
			location.href='$payonline_tools::redirectURL?id_transact=$id_transact&result=$args{result}';
		</script>
		};
	}
	
	payonline_tools::footer ();
	exit;

}

#_________
sub cert {

	print "Content-Type: text/html; charset=UTF-8\n\n";
warn "formcont :: done cert: ** CERT from YellowPay **\n";
	my $YPSrv = $ENV{REMOTE_ADDR};
	return unless $YPSrv;
warn "formcont :: done cert: ... 1 YPSrv=$YPSrv\n";
	return unless ($payonline_tools::YPServersIP =~ /$YPSrv/);

	foreach my $item (keys %args) {
warn "formcont :: done .. cert args : $item=$args{$item}\n";
	}  

	unless ($args{result}) {
warn "formcont :: done .. cert : ** ERR : transaction $args{orderID} KO ** : result=$args{result}\n";
#		exit;
	}

	my $trans		     = payonline_tools::getTrans ($args{orderID});
	   $trans->{PAYID}   = $args{PAYID};
	   $trans->{paymode} = qq{$args{PM} $args{BRAND}};

	my $id_trans = $trans->{id};
warn "formcont :: done cert: ... 2 id_trans=$id_trans\n";
	return unless $id_trans;
	return if  $id_trans =~ /select/i;
	return if  $id_trans =~ /insert/i;
	return if  $id_trans =~ /update/i;

	my $hashdata = {
	orderID 	=> $args{orderID},
	currency 	=> $args{currency},
	amount 		=> $args{amount},
	PM 			=> $args{PM},
	ACCEPTANCE 	=> $args{ACCEPTANCE},
	STATUS 		=> $args{STATUS},
	CARDNO 		=> $args{CARDNO},
	PAYID 		=> $args{PAYID},
	NCERROR 	=> $args{NCERROR},
	BRAND 		=> $args{BRAND},	
	};

	my $hash 	= payonline_tools::makeHash ($hashdata, 'out');

	# - check hash --------
warn "formcont :: done cert: ... 4 hash=$hash, arghash=$args{SHASIGN}\n";
	unless ($hash eq $args{SHASIGN}) {
warn "** ERR : formcont :: cert SHASIGN FAILED : $id_trans ";
		return;
	}
	
	# 	- post result if id_transact
	do_post( $trans, $args{result} ) if $trans->{id_transact};

	if ($args{result} eq '1') {
		my $etat = $payonline_tools::mode eq 'test' ? 'payé-test' : 'payé';
		my $sql  = qq{update transact set
		 etat='$etat',
		 paymode='$args{PM} $args{BRAND}', 
		 PaymentID='$args{PAYID}' 
		 where id='$id_trans'};
		my $sth = payonline_tools::dbquery($sql);
warn " ==>> formcont cert: OK : $id_trans\n";
		$sth->finish ();

		# 	- send email
		my $email = $trans->{email};

		my $msg = qq{
		Confirmation de paiement

		Transaction : $args{orderID}
		PostFinance ID : $args{PAYID}
		Méthode de paiement : $args{PM} $args{BRAND}
		Total : $args{amount} CHF
		Au nom de : $trans->{name} $trans->{firstname}
		$trans->{email}
		$trans->{city}

		};

		#  payonline_tools::send_mail_bc ($email, $inst->{mailinst}, 'EPFL formcont :: payment confirmation', $msg);
		payonline_tools::send_mail ($email, 'Formation continue UNIL/EPFL :: payment confirmation', $msg) if $payonline_tools::mode eq 'prod';

	warn " ==>> formcont cert: confirmation email to : $email $msg\n";    
	}
	
warn " ==>> formcont cert: args dump <<==\n";
	foreach my $item (keys %args) {
warn "$item=$args{$item}\n";
	}
	exit;

}

#____________
sub do_post {
	my ($trans, $result) = @_;

	my $id_transact = $trans->{id_transact};

warn "formcont :: do_post 1 : id_transact=$id_transact, result=$result\n";

	return unless $id_transact;

	my $url 	  = $payonline_tools::postURL;
	my $datecr	  = $trans->{datecr};
	   $datecr	  =~ s/ /+/g;
	my $PaymentID = $trans->{PaymentID};
	my $paymode	  = $trans->{paymode};
	$paymode	  =~ s/ /+/g;

warn "formcont :: do_post 2 : postURL=$url\n";

	use LWP::UserAgent; 

	my $ua = new LWP::UserAgent;
	push @{ $ua->requests_redirectable }, 'POST';

warn "formcont :: do_post 3 : $url, $id_transact, $result\n";

	$trans->{result} = $result;
	foreach my $key (keys %$trans) {
warn "formcont do_post 6 :: $key=$trans->{$key}\n";
	}

	my $response = $ua->post($url, $trans);
	my $content  = $response->decoded_content();
	warn "do_post done : $content\n";

}

