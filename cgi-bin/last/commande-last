#!/usr/bin/perl
#
##############################################################################
#
# File Name:    ress.pl
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#


use strict;
use HTML::Template;

use payonline_tools;

use vars qw(%args $tmpldir $lang $errmsg $crtdate);

my $me 			= $ENV {SCRIPT_NAME};
my $us 			= $ENV {SERVER_NAME};
my $qs 			= $ENV {QUERY_STRING};
my $pi 			= $ENV {PATH_INFO};
my $lang 		= 'en';
my $tmpldir 	= '/var/www/vhosts/payonline.epfl.ch/private/tmpl/XX/';
my $logfile		= '/var/log/httpd/payonline.log';
my $lockfile	= '/tmp/payonline.lock';
my @languages 	= ('fr','en');
my $mailresp	= 'ion.cionca@epfl.ch';
my $masterIP	= '128.178.1.146';

#	- inst id qui contournent les Conditions Générales de payonline
my $bypassCondGen = 'y8xou4juffbh586ua1astocwsnmuh1y4,cyhcwjm0podw3bcnlgu1r0u01s6f0zbc';

my %errmsgs	= (
	fr => [
		'Erreur(s) de saisie',
		'<li>indentificateur d\'instance absent</li>',
		'<li>indentificateur de monnaie absent</li>',
		'<li>total transaction absent</li>',
		'<li>nom absent</li>',
		'<li>prénom absent</li>',
		'<li>adresse absente</li>',
		'<li>code postal absent</li>',
		'<li>ville absente</li>',
		'<li>code pays absent</li>',
		'Veuillez retourner sur la page précédente pour effectuer les corrections nécessaires.',
		'<li>total transaction incorrect</li>',
		'Instance de paiement pas trouvée ou pas active',
		'Veuillez retourner sur la page précédente et suivre le lien de contact pour plus de détails.',
		'<li>les seules monnaies acceptées : CHF, EUR, USD</li>',
		' *** Attention : version de test. Ne pas utiliser, svp ! ***',			# 15
		'Le service <b>payonline@epfl</b> est momentanément indisponible : veuillez rester sur cette page et l\'actualiser dans quelques minutes',			# 16
		'transaction pas trouvée',	#	- 17
		'Veuillez contacter le support payonline', 	#	- 18
		'Erreur de paramètre de lang, fr ou en', 	#	- 19
	      ],
	en => [
		'Input error(s)',				# 0
		'<li>instance identificator missing</li>',	# 1
		'<li>currency missing</li>',			# 2
		'<li>transaction total missing</li>',		# 3
		'<li>last name missing</li>',			# 4
		'<li>first name missing</li>',			# 5
		'<li>address missing</li>',			# 6
		'<li>zip code missing</li>',			# 7
		'<li>city missing</li>',			# 8
		'<li>country code missing</li>',		# 9
		'Please return on the previous page and correct the input',	# 10
		'<li>wrong total format</li>',					# 11
		'Payment instance not found or not active',		# 12
		'Please return on the previous page and follow the contact link for details',		# 13
		'<li>valid currencies : CHF, EUR, USD</li>',			# 14
		' *** Warning : test version. Not for public usage ! ***',	# 15
		'<b>payonline@epfl</b> is currently unavailable : please stay on this page end do a page reload in a couple of minutes.',	# 16
		'transaction not found',		#	- 17
		'Please contact payonline support', 	#	- 18
		'Wrong value for parameter lang : fr or en are accepted', 	#	- 19
	      ],
	);

  payonline_tools::setLog($logfile);
  %args		= payonline_tools::loadargs ();
  $crtdate 	= payonline_tools::getcrtdate();
  $lang    	= lc($args{lang}) if $args{lang};
  $lang 	= 'en' unless $lang;
  
  unless ($lang =~ /(fr|en)/) {
	 $tmpldir 	=~ s/XX/en/;
  	 my $template = initTempl('maintrans.tmpl');
     $errmsg .= qq{<p>$errmsgs{en}->[19]</p>} ;
     $template->param(sErrMsg => $errmsg);
     print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
     exit;
  }

  $tmpldir 	=~ s/XX/$lang/;

  payonline_tools::init ();

#warn "payonline :: init : tmpldir=$tmpldir\n";
  
  maintrans ();

  exit;

#------
sub maintrans {

  my $template = initTempl('maintrans.tmpl');

#  if (-f $lockfile) {
  if (-f $lockfile && $ENV{REMOTE_ADDR} ne $masterIP) {
     my $msg = qq{Service payonline en maintenance !};
     payonline_tools::send_mail ($mailresp, 'EPFL payonline :: maintenance', $msg);

     $errmsg .= qq{<p>$errmsgs{$lang}->[16]</p>} ;
     $template->param(sErrMsg => $errmsg);
     print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
     exit;
  }

  my $sql = qq{select * from instances where id=? and (etat='test' or etat='prod') };
  my $sth = payonline_tools::dbquery ($sql, ($args{id_inst}));

  my $inst = $sth->fetchrow_hashref;
  unless ($inst) {
     $errmsg .= qq{<p>1 $errmsgs{$lang}->[12]</p>} 
  } else {
     $errmsg .= qq{<p>2 $errmsgs{$lang}->[12] : $inst->{id}</p>}  if (($inst->{datedeb} gt $crtdate) or (($inst->{datefin} lt $crtdate) and ($inst->{datefin} ne '0000-00-00')))
  }

  if ($errmsg) {
warn "maintrans : ERR from $ENV{HTTP_REFERER} :: $errmsg\n";
     $errmsg = qq{<h3>$errmsgs{$lang}->[12]</h3>$errmsgs{$lang}->[13]     };
	#	- dump args
	 foreach my $item (sort keys %args) {
		warn "maintrans : ERR from : $item=$args{$item}=\n";
	 }

     $template->param(sErrMsg => $errmsg);
     print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
     exit;
  }
  
  my $id_trans;
  my $query;
  my $Addr;

  if ($args{transaction_id}) {	#	- reload from HTTPS
		my $sql = qq{select * from transact where id_inst=? and id=?  };
		my $sth = payonline_tools::dbquery ($sql, ($args{id_inst},$args{transaction_id}));
		my ($data) = $sth->fetchrow_hashref ();

		unless ($data) {
			$errmsg = qq{<h3>$errmsgs{$lang}->[17]</h3>$errmsgs{$lang}->[18] };
			$template->param(sErrMsg => $errmsg);
			print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
			exit;
		}

		my $query		= payonline_tools::getQuery ($args{transaction_id});
		$id_trans	    = $data->{id};
		$args{id_inst}  = $data->{id_inst};
		$args{Currency} = $query->{Currency};
		$args{Total} 	= $query->{Total};
		$args{LastName} = $query->{LastName};
		$args{FirstName}= $query->{FirstName};
		$args{Addr} 	= $query->{Addr};
		$args{ZipCode}  = substr($query->{ZipCode}, 0, 10);
		$args{City} 	= $query->{City};
		$args{Country}  = $query->{Country};
		$args{Email}  	= $query->{Email};
		$args{Phone}  	= $query->{Phone};
		$args{Fax}  	= $query->{Fax};

  } else {
	  # - check params
	  $errmsg  = $errmsgs{$lang}->[1]	unless $args{id_inst};
	  $errmsg .= $errmsgs{$lang}->[2] 	unless $args{Currency};
	  $errmsg .= $errmsgs{$lang}->[14] 	unless $args{Currency} =~ /(CHF|EUR|USD)/i;
	  $errmsg .= $errmsgs{$lang}->[3] 	unless $args{Total};
	  $errmsg .= $errmsgs{$lang}->[4] 	unless $args{LastName};
	  $errmsg .= $errmsgs{$lang}->[5] 	unless $args{FirstName};
	#  $errmsg .= qq{<li>email absent</li>} 				unless $args{Email};
	  $errmsg .= $errmsgs{$lang}->[6] 	unless $args{Addr};
	  $Addr    = $args{Addr};
	  $Addr	   =~ s/\r/ /g;
	  $Addr	   =~ s/\n/ /g;
#	  $errmsg .= $errmsgs{$lang}->[7] 	unless $args{ZipCode};
	  $errmsg .= $errmsgs{$lang}->[8] 	unless $args{City};
	  $errmsg .= $errmsgs{$lang}->[9]	unless $args{Country};
 
	 # validation du total:  [0-9]{0,9}\.[0-9]{1,2}
	  $errmsg .= $errmsgs{$lang}->[11] unless $args{Total} =~ /^[0-9]{1,9}/;

	  if ($errmsg) {
		 $errmsg = qq{<h3>$errmsgs{$lang}->[0]</h3><ul>$errmsg</ul>$errmsgs{$lang}->[10]
		 };
		 $template->param(sErrMsg => $errmsg);
		 print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
		 exit;
	  }
  
	  my $UserTotal 	 = sprintf "%.2f",$args{Total};
	  foreach my $item (keys %args) {
		$args{$item} = $UserTotal if ($item eq 'Total');
		$args{$item} =~ s/&/%26/g;
		$query 	.= "&$item=$args{$item}";
	  }
	  $query =~ s/^&//;
	  $query =~ s/\n/ /g;
	  $query =~ s/\\//g;
warn "payonline :: maintrans 1: query=$query\n";
	  $id_trans	= payonline_tools::gentablekey('transact',18);
	  my $sql   = qq{update transact set id_inst=?,datecr=Now(),lang=?,query=? where id=?  };
	  my $sth   = payonline_tools::dbquery ($sql, ($args{id_inst},$lang,$query,$id_trans));
  
  }
  
  payonline_tools::setYellowPaySrv($inst->{etat});

  my $UserTotal 	 = sprintf "%.2f",$args{Total};
  my $ParamTotal	 = $UserTotal * 100;	# 		- pas de décimales
warn "payonline :: maintrans 2: id_inst=$args{id_inst},id_trans=$id_trans\n";
  
  my $hashdata = {
	orderID 	=> $id_trans,
	amount 		=> $ParamTotal,
	currency 	=> $args{Currency},
	PSPID 		=> $payonline_tools::ShopID,
  };

  my $txtHash = payonline_tools::makeHash ($hashdata, 'in');
  
  my $txtLang	= $lang eq 'fr' ? 'fr_FR' : 'en_US';
  my $COM 	  	= $inst->{descr};
  $COM 	  	  	= substr($COM, 0, 99) if length($COM) > 100;
  #	- EPFL Shop
  my $sOnLoad 	= 'onload="document.cmd.submit();"' if $bypassCondGen =~ /$args{id_inst}/;
  my $CGchecked = 'checked' 						if $bypassCondGen =~ /$args{id_inst}/;
  
  $template->param(CGchecked 		=> $CGchecked); # CG checked
  $template->param(sErrMsg 			=> $errmsg);
  $template->param(YellowPaySrv		=> $payonline_tools::YellowPaySrv);
  $template->param(txtShopId 		=> $payonline_tools::ShopID);
  $template->param(txtOrderIDShop 	=> $id_trans);
  $template->param(txtInstDescr 	=> $COM);
  $template->param(txtArtCurrency 	=> $args{Currency});
  $template->param(txtParamTotal 	=> $ParamTotal);
  $template->param(txtUserTotal 	=> $UserTotal);
  $template->param(txtBLastName 	=> $args{LastName});
  $template->param(txtBFirstName 	=> $args{FirstName});
  $template->param(txtBEmail 		=> $args{Email});
  $template->param(txtBTel 			=> $args{Phone});
  $template->param(txtBFax 			=> $args{Fax});
  $template->param(txtHash 			=> $txtHash);
  $template->param(txtBAddr1 		=> $Addr);
  $template->param(txtBZipCode 		=> substr($args{ZipCode}, 0, 10));
  $template->param(txtBCity 		=> $args{City});
  $template->param(txtBCountry 		=> $args{Country});
  $template->param(txtLang	 		=> $txtLang);
  $template->param(sOnLoad	 		=> $sOnLoad);

  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
  exit;
}

#------
sub initTempl {
   my ($tmplpath) = @_;

#warn "initTempl: $tmpldir$tmplpath\n";
   my $template = HTML::Template->new(filename => $tmpldir.$tmplpath,
	   strict => 0,
	   cache => 1,
	   die_on_bad_params => 0) or die "err : $!";

   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   $year += 1900;
   $template->param(sCrtYear 	=> $year);
   $template->param(sPathMe 	=> $me);
   $template->param(sDebug 		=> $payonline_tools::DEBUG);
   return $template;
}
